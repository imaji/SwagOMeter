using System;
using System.Numerics;

namespace PinballSwagOMeter
{
    public class GameOverTransformer : MatrixTransformer
    {
        private enum ScreenToShow
        {
            None,
            GameOver,
            John,
            Mark
        }

        protected override BitMatrix Transform()
        {
            SubsequentDelayMs = 2000;
            InvocationCount++;
            switch ((ScreenToShow)InvocationCount)
            {
                case ScreenToShow.GameOver:
                    return BuildGameOverScreen();

                case ScreenToShow.John:
                    return BuildJohnForCredits();

                default:
                    KeepTimerRunning = false;
                    return BuildMarkForCredits();
            }
        }

        private BitMatrix BuildGameOverScreen()
        {
            return BitMatrixFactory.Create(
                new byte[140],
                new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 0 },
                new byte[] { 0, 0, 0, 14, 14, 4, 8, 120, 0, 240, 1, 227, 0, 7, 56 },
                new byte[] { 0, 0, 128, 31, 31, 14, 28, 252, 0, 240, 131, 247, 129, 15, 124 },
                new byte[] { 0, 0, 128, 31, 63, 30, 28, 254, 1, 248, 195, 255, 131, 31, 252, 0 },
                new byte[] { 0, 0, 192, 159, 63, 30, 28, 255, 1, 248, 195, 255, 195, 31, 254, 0 },
                new byte[] { 0, 0, 192, 159, 63, 30, 28, 255, 3, 240, 231, 255, 195, 31, 254, 1 },
                new byte[] { 0, 0, 192, 31, 127, 30, 30, 255, 3, 240, 231, 255, 199, 63, 254, 1 },
                new byte[] { 0, 0, 224, 31, 127, 30, 158, 255, 3, 224, 231, 255, 199, 63, 254, 1 },
                new byte[] { 0, 0, 224, 31, 126, 30, 142, 207, 7, 0, 231, 188, 231, 61, 238, 1 },
                new byte[] { 0, 0, 224, 29, 112, 30, 142, 135, 7, 0, 231, 60, 231, 57, 206, 1 },
                new byte[] { 0, 0, 224, 28, 112, 30, 142, 131, 7, 0, 231, 28, 231, 56, 206, 1 },
                new byte[] { 0, 0, 224, 28, 112, 14, 207, 3, 7, 224, 231, 28, 231, 56, 198, 1 },
                new byte[] { 0, 0, 224, 28, 126, 14, 207, 3, 15, 240, 231, 28, 231, 56, 192, 1 },
                new byte[] { 0, 0, 224, 29, 127, 14, 207, 1, 15, 240, 231, 28, 231, 56, 222, 1 },
                new byte[] { 0, 0, 224, 29, 127, 14, 207, 1, 15, 240, 231, 28, 231, 56, 222, 1 },
                new byte[] { 0, 0, 224, 31, 127, 14, 207, 1, 15, 240, 231, 28, 231, 63, 223, 1 },
                new byte[] { 0, 0, 192, 31, 127, 28, 207, 1, 15, 240, 231, 28, 231, 63, 223, 1 },
                new byte[] { 0, 0, 192, 31, 127, 28, 207, 1, 15, 224, 231, 28, 231, 63, 223, 1 },
                new byte[] { 0, 0, 192, 31, 126, 28, 199, 1, 7, 0, 231, 28, 231, 63, 223, 1 },
                new byte[] { 0, 0, 224, 31, 112, 28, 199, 1, 7, 0, 231, 28, 231, 63, 223, 1 },
                new byte[] { 0, 0, 224, 31, 112, 28, 199, 3, 7, 0, 231, 28, 231, 63, 207, 1 },
                new byte[] { 0, 0, 224, 29, 112, 60, 199, 3, 7, 0, 231, 28, 231, 63, 207, 1 },
                new byte[] { 0, 0, 224, 28, 112, 56, 135, 131, 7, 0, 231, 28, 231, 57, 207, 1 },
                new byte[] { 0, 0, 224, 28, 112, 56, 135, 135, 7, 240, 231, 28, 231, 56, 206, 1 },
                new byte[] { 0, 0, 224, 28, 127, 56, 131, 207, 7, 240, 231, 28, 231, 56, 238, 1 },
                new byte[] { 0, 0, 224, 28, 127, 248, 131, 255, 3, 248, 231, 28, 231, 56, 254, 1 },
                new byte[] { 0, 0, 224, 156, 127, 240, 3, 255, 3, 248, 227, 28, 231, 56, 254, 1 },
                new byte[] { 0, 0, 224, 156, 63, 224, 3, 255, 3, 248, 227, 28, 231, 56, 254, 0 },
                new byte[] { 0, 0, 224, 156, 63, 224, 3, 254, 1, 248, 227, 28, 231, 56, 252, 0 },
                new byte[] { 0, 0, 224, 156, 63, 192, 1, 254, 1, 240, 225, 28, 231, 56, 252, 0 },
                new byte[] { 0, 0, 96, 24, 31, 192, 1, 252, 0, 224, 96, 24, 198, 48, 120 },
                new byte[] { 0, 0, 64, 0, 14, 192, 1, 120, 0, 0, 0, 0, 0, 0, 48 },
                new byte[140],
                new byte[140]
                );
        }

        public BitMatrix BuildJohnForCredits()
        {
            return BitMatrixFactory.Create(
                new byte[] { 0, 0, 0, 224, 243, 99, 248, 126, 190, 15, },
                new byte[] { 0, 0, 0, 227, 247, 99, 252, 126, 191, 31, 0, 0, 0, 248, 1, },
                new byte[] { 0, 0, 0, 3, 198, 96, 204, 96, 51, 24, 0, 0, 128, 255, 31, },
                new byte[] { 0, 0, 0, 192, 199, 96, 204, 126, 63, 24, 0, 0, 224, 255, 255, 0, },
                new byte[] { 0, 0, 0, 224, 195, 96, 204, 126, 62, 24, 0, 0, 240, 255, 255, 1, },
                new byte[] { 0, 0, 0, 99, 192, 96, 204, 96, 51, 24, 0, 0, 252, 255, 255, 7, },
                new byte[] { 0, 0, 0, 227, 199, 96, 252, 126, 179, 31, 0, 0, 255, 255, 255, 15, },
                new byte[] { 0, 0, 0, 192, 199, 96, 248, 126, 179, 15, 0, 0, 255, 255, 255, 31, },
                new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 255, 255, 255, 31, },
                new byte[] { 0, 0, 192, 204, 7, 248, 48, 60, 30, 24, 0, 128, 255, 255, 255, 63, },
                new byte[] { 0, 0, 192, 236, 7, 248, 49, 126, 63, 24, 0, 192, 255, 255, 255, 63, },
                new byte[] { 0, 0, 192, 108, 6, 128, 49, 102, 51, 24, 0, 192, 255, 255, 255, 127, },
                new byte[] { 0, 0, 192, 207, 7, 128, 49, 96, 51, 24, 0, 192, 255, 192, 255, 127, },
                new byte[] { 0, 0, 128, 199, 7, 128, 49, 110, 51, 24, 0, 192, 31, 192, 231, 127, },
                new byte[] { 0, 0, 0, 99, 6, 128, 49, 102, 51, 24, 0, 192, 15, 192, 143, 127, },
                new byte[] { 0, 0, 0, 227, 7, 248, 49, 126, 191, 31, 0, 192, 15, 192, 63, 126, },
                new byte[] { 0, 0, 0, 195, 7, 248, 48, 60, 158, 31, 0, 192, 15, 131, 63, 126, },
                new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 7, 14, 15, 126, },
                new byte[] { 0, 0, 0, 0, 0, 0, 204, 102, 158, 1, 0, 192, 7, 28, 6, 124, },
                new byte[] { 0, 0, 0, 0, 0, 0, 204, 102, 191, 1, 0, 192, 7, 28, 7, 124, },
                new byte[] { 0, 0, 0, 0, 0, 0, 236, 102, 179, 1, 0, 192, 3, 12, 6, 124, },
                new byte[] { 0, 0, 0, 0, 0, 0, 252, 126, 179, 1, 0, 192, 3, 0, 0, 120, },
                new byte[] { 0, 0, 0, 0, 0, 0, 220, 126, 179, 1, 0, 192, 3, 0, 0, 56, },
                new byte[] { 0, 0, 0, 0, 0, 0, 204, 102, 179, 25, 0, 192, 3, 0, 8, 56, },
                new byte[] { 0, 0, 0, 0, 0, 0, 204, 102, 191, 31, 0, 192, 1, 0, 14, 48, },
                new byte[] { 0, 0, 0, 0, 0, 0, 204, 102, 30, 15, 0, 128, 1, 254, 5, 16, },
                new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 1, 4, 4, 16, },
                new byte[] { 102, 12, 216, 204, 51, 243, 192, 60, 159, 16, 0, 0, 1, 12, 6, 16, },
                new byte[] { 102, 12, 216, 236, 55, 251, 193, 126, 191, 25, 0, 0, 2, 240, 1, },
                new byte[] { 118, 12, 216, 108, 54, 155, 193, 102, 176, 31, 0, 0, 14, 0, 0, 14, },
                new byte[] { 126, 12, 216, 15, 54, 155, 193, 96, 176, 31, 0, 0, 252, 3, 248, 31, },
                new byte[] { 110, 12, 216, 239, 54, 155, 193, 110, 176, 25, 0, 224, 255, 0, 192, 127, },
                new byte[] { 102, 12, 216, 108, 54, 155, 193, 102, 176, 25, 0, 0, 252, 0, 192, 7, },
                new byte[] { 102, 140, 223, 236, 247, 251, 253, 126, 191, 25, 0, 0, 254, 0, 240, 15, },
                new byte[] { 102, 140, 223, 204, 227, 241, 252, 60, 159, 25, 0, 128, 255, 3, 252, 63, }
                );
        }

        public BitMatrix BuildMarkForCredits()
        {
            return BitMatrixFactory.Create(
                new byte[] { 0, 0, 0, 224, 243, 99, 248, 126, 190, 15, },
                new byte[] { 0, 0, 0, 227, 247, 99, 252, 126, 191, 31, 0, 0, 0, 224, 255, 0, },
                new byte[] { 0, 0, 0, 3, 198, 96, 204, 96, 51, 24, 0, 0, 0, 56, 192, 3, },
                new byte[] { 0, 0, 0, 192, 199, 96, 204, 126, 63, 24, 0, 0, 0, 6, 0, 14, },
                new byte[] { 0, 0, 0, 224, 195, 96, 204, 126, 62, 24, 0, 0, 0, 3, 0, 28, },
                new byte[] { 0, 0, 0, 99, 192, 96, 204, 96, 51, 24, 0, 0, 128, 3, 0, 48, },
                new byte[] { 0, 0, 0, 227, 199, 96, 252, 126, 179, 31, 0, 0, 128, 1, 0, 48, },
                new byte[] { 0, 0, 0, 192, 199, 96, 248, 126, 179, 15, 0, 0, 128, 0, 0, 48, },
                new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 224, 224, 48, },
                new byte[] { 102, 62, 192, 231, 195, 152, 249, 60, 62, 15, 0, 0, 128, 243, 241, 49, },
                new byte[] { 102, 63, 192, 239, 199, 152, 253, 126, 191, 31, 0, 0, 0, 251, 224, 59, },
                new byte[] { 102, 51, 0, 12, 198, 152, 205, 102, 179, 25, 0, 0, 0, 247, 228, 25, },
                new byte[] { 126, 62, 128, 15, 198, 248, 253, 102, 63, 24, 0, 0, 0, 52, 14, 12, },
                new byte[] { 60, 62, 192, 7, 198, 248, 249, 126, 190, 27, 0, 0, 0, 4, 15, 12, },
                new byte[] { 24, 51, 192, 0, 198, 152, 193, 126, 179, 25, 0, 0, 0, 12, 8, 6, },
                new byte[] { 24, 63, 192, 239, 199, 152, 193, 102, 179, 31, 0, 0, 0, 12, 0, 3, },
                new byte[] { 24, 62, 128, 239, 195, 152, 193, 102, 51, 15, 0, 0, 0, 200, 127, 1, },
                new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 1, },
                new byte[] { 0, 159, 223, 204, 51, 0, 204, 124, 158, 16, 0, 0, 0, 56, 12, 1, },
                new byte[] { 0, 191, 223, 236, 55, 0, 204, 126, 191, 25, 0, 0, 0, 224, 143, 193, 0, },
                new byte[] { 0, 48, 216, 110, 54, 0, 204, 102, 179, 31, 0, 0, 240, 193, 255, 224, 1, },
                new byte[] { 0, 190, 223, 111, 54, 0, 248, 126, 179, 31, 0, 0, 224, 7, 0, 248, 0, },
                new byte[] { 0, 159, 223, 109, 54, 0, 248, 124, 191, 25, 0, 0, 224, 63, 0, 255, 1, },
                new byte[] { 0, 3, 216, 108, 54, 3, 204, 102, 191, 25, 0, 0, 240, 255, 225, 255, 3, },
                new byte[] { 0, 191, 223, 236, 247, 3, 204, 102, 179, 25, 0, 0, 240, 255, 251, 239, 3, },
                new byte[] { 0, 190, 223, 204, 227, 1, 204, 102, 179, 25, 0, 0, 96, 224, 255, 1, },
                new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, },
                new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 251, 119, },
                new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 255, 225, 255, 1, },
                new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 127, 192, 255, 3, },
                new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 31, 128, 255, 3, },
                new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 15, 0, 252, 0, },
                new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 104, },
                new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 0, },
                new byte[140]
                );
        }
    }
}
